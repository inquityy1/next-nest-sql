# services:
#   redis:
#     image: redis:latest
#     container_name: redis
#     ports:
#       - "6379:6379"

#   kafka:
#     image: wurstmeister/kafka:latest
#     container_name: kafka
#     depends_on:
#       - zookeeper
#     environment:
#       - KAFKA_BROKER_ID=1
#       - KAFKA_LISTENERS=PLAINTEXT://:9092
#       - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 # Use container name `kafka`
#       - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
#     ports:
#       - "9093:9093"

#   zookeeper:
#     image: wurstmeister/zookeeper:latest
#     container_name: zookeeper
#     ports:
#       - "2181:2181"
#     environment:
#       - ZOOKEEPER_CLIENT_PORT=2181
#       - ZOOKEEPER_TICK_TIME=2000
#       - ZOOKEEPER_SERVER_ID=1
#       - ZOOKEEPER_MY_ID=1
#     healthcheck:
#       test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   db:
#     image: postgres:15
#     ports:
#       - "5432:5432"
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=qqwwee11
#       - POSTGRES_DB=nextandnest
#     volumes:
#       - postgres-data:/var/lib/postgresql/data

#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     ports:
#       - "3000:3000"
#     environment:
#       - NODE_ENV=production
#       - KAFKA_HOST=kafka
#       - KAFKA_PORT=9092
#     depends_on:
#       - db
#       - redis
#       - kafka
#     volumes:
#       - ./backend:/app

#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "3001:3001"
#     environment:
#       - NODE_ENV=production
#     depends_on:
#       - backend
#     volumes:
#       - /app/node_modules

# volumes:
#   postgres-data:

services:
  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=qqwwee11
      - POSTGRES_DB=nextandnest
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    depends_on:
      - db
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_MY_ID=1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092 # Use container name `kafka`
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    ports:
      - "9093:9093"
    healthcheck:
      test:
        ["CMD", "bash", "-c", "echo dump | nc localhost 9092 | grep brokers"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
    depends_on:
      - db
      - redis
      - kafka
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    volumes:
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
